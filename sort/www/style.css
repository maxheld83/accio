/*=== design for elements ===*/

body {
  margin: 0 0;
  height: 100vh;
}

.gridcontainer {
  display: flex;
  flex-flow: column;
  justify-content: center;
  align-items: center;
  height: 100%;
  /* START: gradient blue to pink, good contrast for items*/
  background: #3494E6;
  background: -webkit-linear-gradient(to left, #EC6EAD, #3494E6);
  background: linear-gradient(to left, #EC6EAD, #3494E6);
  /* START: another gradient blue to pink, but more muted colors*/
  /*background: #E55D87;
  background: -webkit-linear-gradient(to right, #5FC3E4, #E55D87);
  background: linear-gradient(to right, #5FC3E4, #E55D87);*/
  /* START: gradient blue to green, lighter*/
  /*background: #67B26F;
  background: -webkit-linear-gradient(to right, #4ca2cd, #67B26F);
  background: linear-gradient(to right, #4ca2cd, #67B26F);*/
  /* START: gradient blue to purple, muted colors*/
  /*background: #4568DC;
  background: -webkit-linear-gradient(to left, #B06AB3, #4568DC);
  background: linear-gradient(to left, #B06AB3, #4568DC);*/
  /* START: simply blue*/
  /*background: #6190E8;
  background: -webkit-linear-gradient(to right, #A7BFE8, #6190E8);
  background: linear-gradient(to right, #A7BFE8, #6190E8);*/
  /* START: orange to red*/
  /*background: #FF5F6D;
  background: -webkit-linear-gradient(to right, #FFC371, #FF5F6D);
  background: linear-gradient(to right, #FFC371, #FF5F6D);*/
  /* START: yellow to green*/
  /*background: #16A085;
  background: -webkit-linear-gradient(to right, #F4D03F, #16A085);
  background: linear-gradient(to right, #F4D03F, #16A085);*/
}


/*this is for the overall grid*/

.grid {
  /*=== calculation of dimensions===*/
  --margins: 0.1%;
  --d2-short: calc(100% / calc(var(--ncol) + 1/2) - calc(var(--margins) * 2));
  --sqrt3: 1.732050807568877;
  --a-radius: calc(var(--d2-short) / var(--sqrt3));
  /*--a-radius: var(--d2-short);*/
  /*to appease jquery droppable, draggable must be ever so slightly smaller*/
  /*TODO fix this hackfix: https://github.com/maxheld83/accio/issues/94*/
  --droppablemargin: 0.05%;
  --d-long: calc(var(--a-radius) * 2);
  --verticalinset: calc(((var(--d-long) - var(--d2-short)) * 2) - calc(4.5 * var(--margins)));
  /*horizontal centering*/
  position: relative;
  /*TODO this actually causes problems until https://github.com/maxheld83/accio/issues/107 is solved!*/
  overflow: visible;
  /*this is rewritten by below js*/
  width: 100%;
}


/*this is simply the hexagonal shape*/

.hexagon {
  overflow: hidden;
  clip-path: polygon(50% 0, 100% 25%, 100% 75%, 50% 100%, 0 75%, 0 25%);
  -webkit-clip-path: polygon(50% 0, 100% 25%, 100% 75%, 50% 100%, 0 75%, 0 25%);
  -webkit-shape-outside: polygon(50% 0, 100% 25%, 100% 75%, 50% 100%, 0 75%, 0 25%);
}


/*this gives dimensions to hexagons when they are direct children of grid*/

.cell, .ui-draggable-dragging {
  width: var(--d2-short);
  padding-top: var(--d-long);
}


/*this gives dimensions when item is in parent cell*/

.cell .item {
  width: 100%;
}


/*this designs an item*/

.item {
  background-color: rgba(255, 255, 255, 0.9);
  visibility: visible;
  z-index: 1;
  position: absolute;
  margin: 0 auto;
  top: 0;
  bottom: 0;
}

.cell.ui-droppable-hover {
  background-color: white;
  opacity: 0.4;
}


/*this takes care of all the arrangement of the cells IN the grid*/

.cell {
  float: left;
  position: relative;
  margin-right: var(--margins);
  margin-left: var(--margins);
  margin-top: calc(var(--verticalinset) * -1);
  visibility: hidden;
  transition: all 0.2s ease-in-out;
}

.zoom-in {
  transform: scale(2.027);
  /*TODO calculate scale plus margins, so that it fits exactly*/
  transition: all 0.2s ease-in-out;
  z-index: 9999;
}

.scale-contrast {
  opacity: 0.6;
  /*needs to be visible, because otherwise .cells visibility:hidden conflicted in safari*/
  visibility: visible;
}


/*used simply to select interactivity*/

.droppable {}


/*design for free, but available cells*/

.free {
  background-color: rgba(255, 255, 255, 0.2);
  visibility: visible;
  /*transition must override parameters from cell (zoom-in), because free cells shouldn't transition slowly.*/
  transition: initial;
}


/*additions for the cloned item while dragging, which is now relative to .grid!*/

.ui-draggable-dragging {
  position: absolute;
  bottom: auto;
}


/*.img {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    background-size: contain;
    background-repeat: no-repeat;
    background-position: center;
    margin-left: 1%;
    margin-right: 1%;
  }
  */

.image {
  max-width: 100%;
  padding-top: 28.5%;
}

.textstyle {
  color: black;
  opacity: 0.7;
  font-family: sans-serif;
  top: 25%;
  left: 10%;
  right: 10%;
  bottom: 10%;
  text-align: center;
  position: absolute;
  font-size: 0.9vw;
}


/*.gridcontainer > #condition { order: 1; }*/


/*.gridcontainer > .grid { order: 2; }*/


/*.gridcontainer > #extremes { order: 3; }*/

.gridlabel {
  color: white;
  font-family: sans-serif;
  opacity: 0.6;
  /*padding: 1.5%;*/
  text-align: center;
  font-size: 1.5vw;
  width: 100%;
  text-align: center;
  margin: 2% auto;
}


/*=== hack fix: intend lines dependening on ncol ===*/

.ncol02>.cell:nth-child(-n + 2) {
  margin-top: var(--margins);
}


/*give first/last n items a top/bottom margin*/

.ncol02>cell:nth-last-child(-n + 2) {
  margin-bottom: var(--margins);
}


/*give first/last n items a top/bottom margin*/

.ncol02>.cell:nth-child(4n + 1) {
  margin-left: calc(var(--d2-short) / 2 + 2 * var(--margins));
}


/*intend every n*2 items, HERE you can set whether to indent even or odd rows*/

.ncol03>.cell:nth-child(-n + 3) {
  margin-top: var(--margins);
}


/*give first/last n items a top/bottom margin*/

.ncol03>cell:nth-last-child(-n + 3) {
  margin-bottom: var(--margins);
}


/*give first/last n items a top/bottom margin*/

.ncol03>.cell:nth-child(6n + 1) {
  margin-left: calc(var(--d2-short) / 2 + 2 * var(--margins));
}


/*intend every n*2 items, HERE you can set whether to indent even or odd rows*/

.ncol04>.cell:nth-child(-n + 4) {
  margin-top: var(--margins);
}


/*give first/last n items a top/bottom margin*/

.ncol04>cell:nth-last-child(-n + 4) {
  margin-bottom: var(--margins);
}


/*give first/last n items a top/bottom margin*/

.ncol04>.cell:nth-child(8n + 1) {
  margin-left: calc(var(--d2-short) / 2 + 2 * var(--margins));
}


/*intend every n*2 items, HERE you can set whether to indent even or odd rows*/

.ncol05>.cell:nth-child(-n + 5) {
  margin-top: var(--margins);
}


/*give first/last n items a top/bottom margin*/

.ncol05>cell:nth-last-child(-n + 5) {
  margin-bottom: var(--margins);
}


/*give first/last n items a top/bottom margin*/

.ncol05>.cell:nth-child(10n + 1) {
  margin-left: calc(var(--d2-short) / 2 + 2 * var(--margins));
}


/*intend every n*2 items, HERE you can set whether to indent even or odd rows*/

.ncol06>.cell:nth-child(-n + 6) {
  margin-top: var(--margins);
}


/*give first/last n items a top/bottom margin*/

.ncol06>cell:nth-last-child(-n + 6) {
  margin-bottom: var(--margins);
}


/*give first/last n items a top/bottom margin*/

.ncol06>.cell:nth-child(12n + 1) {
  margin-left: calc(var(--d2-short) / 2 + 2 * var(--margins));
}


/*intend every n*2 items, HERE you can set whether to indent even or odd rows*/

.ncol07>.cell:nth-child(-n + 7) {
  margin-top: var(--margins);
}


/*give first/last n items a top/bottom margin*/

.ncol07>cell:nth-last-child(-n + 7) {
  margin-bottom: var(--margins);
}


/*give first/last n items a top/bottom margin*/

.ncol07>.cell:nth-child(14n + 1) {
  margin-left: calc(var(--d2-short) / 2 + 2 * var(--margins));
}


/*intend every n*2 items, HERE you can set whether to indent even or odd rows*/

.ncol08>.cell:nth-child(-n + 8) {
  margin-top: var(--margins);
}


/*give first/last n items a top/bottom margin*/

.ncol08>cell:nth-last-child(-n + 8) {
  margin-bottom: var(--margins);
}


/*give first/last n items a top/bottom margin*/

.ncol08>.cell:nth-child(16n + 1) {
  margin-left: calc(var(--d2-short) / 2 + 2 * var(--margins));
}


/*intend every n*2 items, HERE you can set whether to indent even or odd rows*/

.ncol09>.cell:nth-child(-n + 9) {
  margin-top: var(--margins);
}


/*give first/last n items a top/bottom margin*/

.ncol09>cell:nth-last-child(-n + 9) {
  margin-bottom: var(--margins);
}


/*give first/last n items a top/bottom margin*/

.ncol09>.cell:nth-child(18n + 1) {
  margin-left: calc(var(--d2-short) / 2 + 2 * var(--margins));
}


/*intend every n*2 items, HERE you can set whether to indent even or odd rows*/

.ncol10>.cell:nth-child(-n + 10) {
  margin-top: var(--margins);
}


/*give first/last n items a top/bottom margin*/

.ncol10>cell:nth-last-child(-n + 10) {
  margin-bottom: var(--margins);
}


/*give first/last n items a top/bottom margin*/

.ncol10>.cell:nth-child(20n + 1) {
  margin-left: calc(var(--d2-short) / 2 + 2 * var(--margins));
}


/*intend every n*2 items, HERE you can set whether to indent even or odd rows*/

.ncol11>.cell:nth-child(-n + 11) {
  margin-top: var(--margins);
}


/*give first/last n items a top/bottom margin*/

.ncol11>cell:nth-last-child(-n + 11) {
  margin-bottom: var(--margins);
}


/*give first/last n items a top/bottom margin*/

.ncol11>.cell:nth-child(22n + 1) {
  margin-left: calc(var(--d2-short) / 2 + 2 * var(--margins));
}


/*intend every n*2 items, HERE you can set whether to indent even or odd rows*/

.ncol12>.cell:nth-child(-n + 12) {
  margin-top: var(--margins);
}


/*give first/last n items a top/bottom margin*/

.ncol12>cell:nth-last-child(-n + 12) {
  margin-bottom: var(--margins);
}


/*give first/last n items a top/bottom margin*/

.ncol12>.cell:nth-child(24n + 1) {
  margin-left: calc(var(--d2-short) / 2 + 2 * var(--margins));
}


/*intend every n*2 items, HERE you can set whether to indent even or odd rows*/

.ncol13>.cell:nth-child(-n + 13) {
  margin-top: var(--margins);
}


/*give first/last n items a top/bottom margin*/

.ncol13>cell:nth-last-child(-n + 13) {
  margin-bottom: var(--margins);
}


/*give first/last n items a top/bottom margin*/

.ncol13>.cell:nth-child(26n + 1) {
  margin-left: calc(var(--d2-short) / 2 + 2 * var(--margins));
}


/*intend every n*2 items, HERE you can set whether to indent even or odd rows*/

.ncol14>.cell:nth-child(-n + 14) {
  margin-top: var(--margins);
}


/*give first/last n items a top/bottom margin*/

.ncol14>cell:nth-last-child(-n + 14) {
  margin-bottom: var(--margins);
}


/*give first/last n items a top/bottom margin*/

.ncol14>.cell:nth-child(28n + 1) {
  margin-left: calc(var(--d2-short) / 2 + 2 * var(--margins));
}


/*intend every n*2 items, HERE you can set whether to indent even or odd rows*/

.ncol15>.cell:nth-child(-n + 15) {
  margin-top: var(--margins);
}


/*give first/last n items a top/bottom margin*/

.ncol15>cell:nth-last-child(-n + 15) {
  margin-bottom: var(--margins);
}


/*give first/last n items a top/bottom margin*/

.ncol15>.cell:nth-child(30n + 1) {
  margin-left: calc(var(--d2-short) / 2 + 2 * var(--margins));
}


/*=== hack-fix to read in number of columns ===*/


/*necessary because css cannot read, and calc on number of siblings*/

.ncol01 {
  --ncol: 1;
}

.ncol02 {
  --ncol: 2;
}

.ncol03 {
  --ncol: 3;
}

.ncol04 {
  --ncol: 4;
}

.ncol05 {
  --ncol: 5;
}

.ncol06 {
  --ncol: 6;
}

.ncol07 {
  --ncol: 7;
}

.ncol08 {
  --ncol: 8;
}

.ncol09 {
  --ncol: 9;
}

.ncol10 {
  --ncol: 10;
}

.ncol11 {
  --ncol: 11;
}

.ncol12 {
  --ncol: 12;
}

.ncol13 {
  --ncol: 13;
}

.ncol14 {
  --ncol: 14;
}

.ncol15 {
  --ncol: 15;
}
